box: golang

build:
  steps:
    - setup-go-workspace

    # Gets the dependencies
    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          wget https://github.com/Masterminds/glide/releases/download/v0.12.2/glide-v0.12.2-linux-amd64.tar.gz
          tar xvzf glide-v0.12.2-linux-amd64.tar.gz
          export PATH=./linux-amd64:$WERCKER_SOURCE_DIR/bin:$PATH
          glide --version
          glide install

    # Test the project
    - script:
        name: go test
        code: |
          LOG_LEVEL=debug go test $(glide novendor) -v -cover -race

  after-steps:
    - slack-notifier:
        url: $SLACK_URL
        channel: customer0
        username: robo-wercker
        notify_on: failed
        branch: master

crosscompile:
  steps:
    - setup-go-workspace

    # Gets the dependencies
    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          wget https://github.com/Masterminds/glide/releases/download/v0.12.2/glide-v0.12.2-linux-amd64.tar.gz
          tar xvzf glide-v0.12.2-linux-amd64.tar.gz
          export PATH=./linux-amd64:$WERCKER_SOURCE_DIR/bin:$PATH
          glide --version
          glide install

    - script:
        name: set release id variable for version
        code: |
          go get github.com/xchapter7x/versioning
          export WERCKER_GITHUB_CREATE_RELEASE_ID=`versioning bump_patch`

    - script:
        name: compile built in go binaries
        code: |
          COMMIT=`git rev-parse HEAD | cut -c1-6`
          VERSION=${WERCKER_GITHUB_CREATE_RELEASE_ID}-${COMMIT}
          GOOS=linux go build -o download-bosh-io-stemcell/download-bosh-io-stemcell -ldflags "-s -w -X main.Version=${VERSION}" ./download-bosh-io-stemcell/main.go

    - script:
        name: create tarball of task bundle
        code: |
          COMMIT=`git rev-parse HEAD | cut -c1-6`
          VERSION=${WERCKER_GITHUB_CREATE_RELEASE_ID}-${COMMIT}
          mkdir bundle
          echo ${VERSION} > version.txt
          tar --exclude=bundle -cvzf bundle/tasks-bundle.tgz apply-changes \
          download-bosh-io-stemcell \
          stage-product \
          upload-product \
          upload-stemcell \
          export-opsmgr-settings \
          import-opsmgr-settings \
          deploy-opsman-vm \
          version.txt

    - script:
        name: add tarball to artifact
        code: |
          cp -R ./bundle ${WERCKER_OUTPUT_DIR}
          cp -R version.txt ${WERCKER_OUTPUT_DIR}

  after-steps:
    - slack-notifier:
        url: $SLACK_URL
        channel: customer0
        username: robo-wercker
        notify_on: failed
        branch: master

deploy-pre-release:
  steps:
    - setup-go-workspace
    - script:
        name: install-packages
        code: |
          sudo apt-get install -y openssh-client wget
          ls -la
          pwd
          echo ${WERCKER_OUTPUT_DIR}
          ls -la ${WERCKER_OUTPUT_DIR}

    - wercker/add-ssh-key@1.0.2:
        keyname: PCF_GITHUB_KEY

    - wercker/add-to-known_hosts@1.4.0:
        hostname: github.com
        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48

    - script:
        name: set release id variable for version
        code: |
          export WERCKER_GITHUB_CREATE_RELEASE_ID=$(cat version.txt)
          ls -lha

    - github-create-release:
        token: $GITHUB_TOKEN
        tag: $WERCKER_GITHUB_CREATE_RELEASE_ID
        title: concourse-tasks-bundle $WERCKER_GITHUB_CREATE_RELEASE_ID
        draft: true
        prerelease: ${IS_PRE_RELEASE}

    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: bundle/tasks-bundle.tgz
        release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID
        content-type: application/x-gzip

    - script:
        name: add repo to artifact
        code: |
          cp -R ./ ${WERCKER_OUTPUT_DIR}

  after-steps:
    - slack-notifier:
        url: $SLACK_URL
        channel: customer0
        username: robo-wercker
        notify_on: failed
        branch: master
